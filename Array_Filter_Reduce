Array.map() is a method that behaves like a loop. It creates a new array and returns values transformed by the applied callback function. It doesn’t do anything more than the standard for or forEach can do, it just provides a much nicer notation. It always returns an array with the same length and every element corresponds to the same position in the source array.


Increasing numbers of 1
var elem = [2,5,8];
1) for loop
var newElem = [];
for(var i = 0; i < elem.length; i++){
  newElem.push(elem[i]+1);
}
console.log(newElem); // 3,6,9
2) map()
var elemNew =  elem.map(function(num){
  return num + 1;
});
console.log(elemNew); //3,6,9
3) And ES2015 version…
var elemNew = elem.map((num) => num + 1);
console.log(elemNew); //3,6,9
------------------------------Filter values in an array-------------------------------------
create a new array based on an already existing one, but simultaneously remove all the elements that are smaller than 5
var numbers = [2,7, 4, 9, 0, 5];
1) for loop
var numbersNew = [];
for(var i = 0; i < numbers.length; i++){
  if(numbers[i] >= 5){
    numbersNew.push(numbers[i]);
  }
}// end for
console.log(numbersNew);// [7,9,5]
2) map();
var numbersNew = numbers.map(function(num){
  return num >= 5;
});
console.log(numbersNew); [false, true, false, true, false, true]
3) filter();
Array.prototype.filter() method. It works in a very similar way to map(), but the callback function, instead of returning a modified element, returns a boolean value that dictates if the element should be added to the new array (true) or not (false). Compared to map, filter doesn’t guarantee that the length of the new array is the same as the source array.

var numbersNew = numbers.filter(function(num){
  return num >= 5;
});
console.log(numbersNew);// [7, 9, 5]

4) filter() ES 2015 version
var numbersNew = numbers.filter((num) => num >= 5);
console.log(numbersNew);// [7, 9, 5]

---------------Reducing an array’s values to a single value------------------
Lets say we would like to sum all of the values in an array. Array.prototype.reduce() comes in handy. This method is a bit more complicated, but at the same time much more powerful. Compared to map() and filter(), reduce() can take one more argument - the initial value - not only the callback function. The second argument is optional. Let’s go back to our example and try to sum up all the values inside an array.

var numbers = [2,7, 4, 9, 0, 5];
1) for loop 
var numbersSum = 0;
for(var i = 0; i < numbers.length; i++){
  numbersSum += numbers[i];
}
console.log(numbersSum); // 27

2) reduce();
var numbersSum =  numbers.reduce(function(total, num){
  return total + num;
});
console.log(numbersSum); // 27

3) reduce () ES 2015 version
var numbersSum = numbers.reduce((total, num) => total + num);
console.log(numbersSum); // 27

Initially when the method reduce() traverses through a number array it will take the first value (2) of the array as the 'total' argument and the second value (7) as 'num'. The sum of the arguments (2 + 7) is returned (9) and is passed to the 'total' argument to use in the next iteration. The array’s third value (4) is assigned to the 'num' argument. Again, the sum of these two values is returned (9 + 4 = 13). ....  Because we don’t have any more values in the numbers array, we receive 27 as the result of the reduce() method. 
----------------------------
the reduce() method optionally accepts a second argument as the initial value. Let’s repeat our example but with an initial value of 1000.
so ....
var numbersSum = numbers.reduce(function(){}, 1000);
1)
var numbersSum = numbers.reduce(function(total, num){
  return total + num;
}, 1000);
console.log(numbersSum);// 1027
2) ES 2015 version
var numbersSum = numbers.reduce(((total, num) => total + num), 1000);
console.log(numbersSum);// 1027
Passing the optional initial value as a second argument slightly changes the previously described behavior. The difference is minor though. Initially it assigns 1000 to the total argument and the first value in the array (2) as the num argument. The pattern then continues identically.

---------------------- Chain it together ------------------------------
The beautiful thing about map() and filter() is the fact that an array goes in and an array comes out as a result of the method. This behaviour means we can chain these methods together with ease.

Increasing number of 1 and simultaneously remove all the elements that are smaller than 5
var numbers = [2, 7, 4, 9, 0, 5];
1) map() and filter()
var numbersNew = numbers.map(function(num){
  return num + 1;
}).filter(function(num){
   return num >= 5;
});
console.log(numbersNew);// [8, 5, 10, 6]

2) map() and filter() ES 2015 version 
var numbersNew = numbers.map((num) => num + 1).filter((num) => num >= 5);

console.log(numbersNew);// [8, 5, 10, 6]
